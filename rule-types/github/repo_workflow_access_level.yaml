---
version: v1
release_phase: alpha
type: rule-type
name: repo_workflow_access_level
display_name: Limit the external access of private repositories
short_failure_message: External access to workflows in this private repository is not restricted to the appropriate level, risking unauthorized access.
severity:
  value: medium
context:
  provider: github
description: |
  Verifies the level of access that workflows outside of the repository have
  to actions and reusable workflows in the repository. This only applies to private repositories.
guidance: |
  Ensure that the level of access that workflows outside of the
  repository have to actions and reusable workflows in the repository
  is set to the appropriate level.

  Actions and reusable workflows in your private repositories can be
  shared with other private repositories owned by the same user or
  organization.

  For more information, see [GitHub's
  documentation](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository).
def:
  # Defines the section of the pipeline the rule will appear in.
  # This will affect the template used to render multiple parts
  # of the rule.
  in_entity: repository
  # Defines the schema for writing a rule with this rule being checked
  rule_schema:
    properties:
      access_level:
        type: string
        enum: ["none", "user", "organization"]
    required:
      - access_level
  # Defines the configuration for ingesting data relevant for the rule
  ingest:
    type: rest
    rest:
      # This is the path to the data source. Given that this will evaluate
      # for each repository in the organization, we use a template that
      # will be evaluated for each repository. The structure to use is the
      # protobuf structure for the entity that is being evaluated.
      endpoint: "/repos/{{.Entity.Owner}}/{{.Entity.Name}}/actions/permissions/access"
      # This is the method to use to retrieve the data. It should already default to JSON
      parse: json
  # Defines the configuration for evaluating data ingested against the given profile
  eval:
    type: jq
    jq:
      # Ingested points to the data retrieved in the `ingest` section
      - ingested:
          def: ".access_level"
        # profile points to the profile itself.
        profile:
          def: '.access_level'
  remediate:
    type: rest
    rest:
      method: PUT
      endpoint: "/repos/{{.Entity.Owner}}/{{.Entity.Name}}/actions/permissions/access"
      body: |
        { "access_level": "{{.Profile.access_level}}" }
  # Defines the configuration for alerting on the rule
  alert:
    type: security_advisory
    security_advisory: {}
