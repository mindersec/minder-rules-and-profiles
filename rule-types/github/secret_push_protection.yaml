---
version: v1
release_phase: beta
type: rule-type
name: secret_push_protection
display_name: Enable secret push protection to avoid pushing hardcoded secrets
severity:
  value: high
context:
  provider: github
description: |
  Verifies that secret push protection is enabled for a given repository.
  Note that this will will not work as expected for private repositories
  unless you have GitHub Advanced Security enabled. If you still want to use
  this rule because you have a mixture of private and public repositories,
  enable the `skip_private_repos` flag.
guidance: |
  Ensure that secret scanning push protection is enabled for the
  repository.

  You can use secret scanning to prevent supported secrets from being
  pushed into your repository by enabling secret scanning push
  protection.

  For more information, see [GitHub's
  documentation](https://docs.github.com/en/code-security/secret-scanning/push-protection-for-repositories-and-organizations#enabling-secret-scanning-as-a-push-protection-for-a-repository).
def:
  # Defines the section of the pipeline the rule will appear in.
  # This will affect the template used to render multiple parts
  # of the rule.
  in_entity: repository
  # Defines the schema for writing a rule with this rule being checked
  rule_schema:
    properties:
      enabled:
        type: boolean
        default: true
      skip_private_repos:
        type: boolean
        default: true
        description: |
          If true, this rule will be marked as skipped for private repositories
  # Defines the configuration for ingesting data relevant for the rule
  ingest:
    type: rest
    rest:
      # This is the path to the data source. Given that this will evaluate
      # for each repository in the organization, we use a template that
      # will be evaluated for each repository. The structure to use is the
      # protobuf structure for the entity that is being evaluated.
      endpoint: "/repos/{{.Entity.Owner}}/{{.Entity.Name}}"
      # This is the method to use to retrieve the data. It should already default to JSON
      parse: json
  # Defines the configuration for evaluating data ingested against the given profile
  eval:
    type: rego
    rego:
      type: deny-by-default
      def: |
        package minder

        import future.keywords.if

        default allow := false
        default skip := false

        allow if {
          input.profile.enabled
          input.ingested.security_and_analysis.secret_scanning_push_protection.status == "enabled"
        }

        allow if {
          not input.profile.enabled
          input.ingested.security_and_analysis.secret_scanning_push_protection.status == "disabled"
        }

        skip if {
          input.profile.skip_private_repos == true
          input.ingested.private == true
        }
  remediate:
    type: rest
    rest:
      method: PATCH
      endpoint: "/repos/{{.Entity.Owner}}/{{.Entity.Name}}"
      body: |
        {{- if .Profile.enabled }}
        { "security_and_analysis": {"secret_scanning_push_protection": { "status": "enabled" } } }
        {{- else }}
        { "security_and_analysis": {"secret_scanning_push_protection": { "status": "disabled" } } }
        {{- end }}
  # Defines the configuration for alerting on the rule
  alert:
    type: security_advisory
    security_advisory: {}
