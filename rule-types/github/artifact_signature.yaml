---
version: v1
release_phase: alpha
type: rule-type
name: artifact_signature
display_name: Ensure artifacts are signed and verified
short_failure_message: Artifact is not signed or its signature is unverified
severity:
  value: high
context:
  provider: github
description: Verifies that a given artifact has a valid signature.
guidance: |
  Ensure that the artifact has been signed and the signature has been
  verified.

  Artifact signing allows a user to add a digital fingerprint to an
  artifact and verify its trust later. It allows the artifact user to
  verify the source and trust the container image. Minder leverages
  sigstore (cosign) to verify an artifact has been signed.

  For more information, see [Sigstore's
  documentation](https://docs.sigstore.dev/signing/signing_with_containers).
def:
  # Defines the section of the pipeline the rule will appear in.
  # This will affect the template used to render multiple parts
  # of the rule.
  in_entity: artifact
  # Defines the schema for parameters that will be passed to the rule
  param_schema:
    type: object
    properties:
      name:
        type: string
        description: "The name of the artifact to check. Leave blank to match all names."
      tags:
        "type": array
        "items": {
          "type": "string"
        }
        description: "The tags of the artifact to check. Must be a subset of the tags the artifact has"
      tag_regex:
        type: string
        description: "The regex to match the tags of the artifact to check. Conflicts with tags."
      type:
        "type": string
        "default": "container"
        "enum": ["container"]
        description: "The type of artifact to check. Currently only container is supported."
      sigstore:
        type: string
        description: "URL of the sigstore TUF root to use for verification."
        default: "tuf-repo-cdn.sigstore.dev"
    required:
      - tags
  # Defines the schema for writing a rule with this rule being checked
  rule_schema:
    type: "object"
    properties:
      is_signed:
        type: boolean
        description: "Set to true to enforce artifact being signed. This checks only if there's a signature for this image, but it doesn't verify it."
      is_verified:
        type: boolean
        description: "Set to true to enforce artifact signature being verified. This checks that the signature is verified against the configured Sigstore instance."
      repository:
        type: string
        description: "Set the repository that is expected to produce the artifact, i.e. https://github.com/stacklok/minder"
      branch:
        type: string
        description: "Set the repository branch that is expected to produce the artifact, i.e. main"
      signer_identity:
        type: string
        description: "Set the signer identity that is expected to produce the artifact, i.e. docker-image-build-push.yml or an email address"
      runner_environment:
        type: string
        description: "Set the runner environment that is expected to produce the artifact, i.e. github-hosted"
      allowed_workflow:
        type: boolean
        description: "Set to true to enforce checking if the workflow that build this artifact is part of the allowed workflows. Note: Not implemented yet."
      cert_issuer:
        type: string
        description: "Set the certificate issuer that is expected to produce the artifact provenance, i.e. https://token.actions.githubusercontent.com"
  # Defines the configuration for ingesting data relevant for the rule
  ingest:
    type: artifact
    # Currently no configuration
    artifact: {}
  # Defines the configuration for evaluating data ingested against the given profile
  eval:
    type: rego
    rego:
      type: constraints
      def: |
        package minder

        import future.keywords.every
        import future.keywords.if

        violations[{"msg": msg}] {
          # iterate over the artifacts. We want all artifacts to be checked individually
          artifactVersion := input.ingested[_]

          # for each artifact, iterate over all the profile keys
          keys := object.keys(input.profile)
          key := keys[_]
          value := input.profile[key]

          artifactVersion.Verification[key] != value

          msg := sprintf("Verification failed for on key '%s': expected '%v', got '%v'", [key, value, artifactVersion.Verification[key]])
        }
  # Defines the configuration for alerting on the rule
  alert:
    type: security_advisory
    security_advisory: {}
