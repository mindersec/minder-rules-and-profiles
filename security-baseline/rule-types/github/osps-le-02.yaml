version: v1
release_phase: alpha
type: rule-type
name: osps-le-02
display_name: License meets the OSI or the FSF definition
short_failure_message: License does not meet OSI or FSF definition
severity:
  value: info
context:
  provider: github
description: |
  Ensure that the project’s source code is distributed under a
  recognized and legally enforceable open source software license.
guidance: |
  Ensure that the project’s source code is distributed under a
  recognized and legally enforceable open source software license,
  providing clarity on how the code can be used and shared by others.
def:
  in_entity: repository
  rule_schema: {}
  ingest:
    type: rest
    rest:
      endpoint: '/repos/{{.Entity.Owner}}/{{.Entity.Name}}/license'
      parse: json
      fallback:
        - http_code: 404
          body: |
            {"http_status": 404, "message": "License details not found}
  eval:
    type: rego
    data_sources:
      - name: spdx
    rego:
      type: constraints
      def: |
        package minder

        import future.keywords.every
        import future.keywords.if

        violations[{"msg": msg}] {
          license := input.ingested.license.spdx_id

          resp2 := minder.datasource.spdx.licenses({})
          licenses := resp2.body.licenses
          osi := { l.licenseId | l := licenses[_]; l.isOsiApproved }
          fsf := { l.licenseId | l := licenses[_]; l.isFsfLibre }
          approved_licenses := osi | fsf

          count(approved_licenses) != 0
          license != null
          not license in approved_licenses
          msg := sprintf("License %s is not OSI/FSF approved", [license])
        }
